name: Build and Analyze

# 이벤트 트리거 정의
# main_LMS 브랜치에 푸시하거나, PR(Pull Request) 이벤트가 발생할 때 워크플로 실행
on:
  push:
    branches:
      - main_LMS  # main_LMS 브랜치로 푸시될 때 트리거
  pull_request:
    types: [opened, synchronize, reopened]  # PR 생성, 동기화, 다시 열기 이벤트에서 실행

# 작업 정의
jobs:
  sonarcloud:  # 작업 이름
    name: SonarQube Cloud Analysis  # 작업의 UI에 표시되는 이름
    runs-on: ubuntu-latest  # GitHub Actions의 가상 환경 설정

    steps:
      # 1. 코드 체크아웃
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Git 히스토리를 모두 가져와 SonarCloud 분석의 정확성을 보장

      # 2. 의존성 설치
      - name: Install dependencies
        run: npm install  # 프로젝트의 package.json에 정의된 의존성 설치

      # 3. SonarCloud 분석 실행
      - name: SonarQube Cloud Scan
        uses: SonarSource/sonarcloud-github-action@master  # SonarCloud 분석을 위한 GitHub Action
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # GitHub 리포지토리와의 인증을 위한 토큰
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}    # SonarCloud 프로젝트 인증 토큰

      # 4. 린팅 테스트 추가
      # 프로젝트의 코드 스타일 및 품질을 ESLint로 검사
      #- name: Run ESLint
      #  run: npm run lint  # package.json에서 lint 스크립트를 실행

      # 5. 빌드 단계 추가
      # React 프로젝트 빌드
      - name: Build Project
        run: npm run build  # 빌드 실행 후 결과물은 기본적으로 build/ 디렉토리에 생성

      # 6. 빌드 결과물 검증
      # S3 배포 전에 빌드된 파일들이 올바르게 생성되었는지 확인
      #- name: Verify Build Artifacts
      #  run: |
      #    test -e build/index.html && echo "index.html exists"
      #    test -e build/static/js/main.js && echo "main.js exists"
      #    test -e build/static/css/main.css && echo "main.css exists"

      # 7. 테스트 실행 단계 (선택 사항)
      # React Testing Library 또는 기타 도구를 사용한 테스트 실행
      #- name: Run Tests
      #  run: npm test  # Jest 또는 기타 도구를 사용한 테스트 실행

      # 8. AWS 사용자 인증 정보 입력
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 9. 빌드 결과물 S3에 업로드
      - name: Deploy to S3
        run: aws s3 sync build/ s3://${{ secrets.S3_BUCKET_NAME }} --delete
